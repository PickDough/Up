@inject HttpClient Http
@using Up.Common.Dto
@namespace Up.Client.Components

<input style="width: 60rem" list="autoCompletes"
       type="text"
       @oninput="OnInputAutoComplete"
       placeholder="@placeholder">
<datalist id="autoCompletes">
    @foreach (var item in autoCompletes)
    {
        <option value="@item">@item.Split(" ").Last()</option>
    }
</datalist>


@code {
    private string placeholder = "@department=... @position=...";
    const string DepartmentPrefix = "@department=";
    const string PositionPrefix = "@position=";
    private List<string> autoCompletes = [DepartmentPrefix, PositionPrefix];
    private Dictionary<string, Position> availablePositions = [];
    private Dictionary<string, Department> availableDepartments = [];

    protected override async Task OnInitializedAsync()
    {
        availablePositions = (await Http.GetFromJsonAsync<List<Position>>("position") ?? []).ToDictionary(p => string.Join("", p.PositionName.Split(" ")));
        availableDepartments = (await Http.GetFromJsonAsync<List<Department>>("department") ?? []).ToDictionary(d => string.Join("", d.DepartmentName.Split(" ")));
    }

    private void OnInputAutoComplete(ChangeEventArgs e)
    {
        var input = e.Value!.ToString()!;
        var last = LastWord(input);
        if (last.StartsWith(DepartmentPrefix))
        {
            ValueAutoCompletion(last, input, DepartmentPrefix, availableDepartments);
        }
        else if (last.StartsWith(PositionPrefix))
        {
            ValueAutoCompletion(last, input, PositionPrefix, availablePositions);
        }
        else
        {
            KeyAutoCompletion(last, input);
        }

        StateHasChanged();
    }

    void KeyAutoCompletion(string last, string input)
    {
        var suggestions = StartsWith(last, [DepartmentPrefix, PositionPrefix]);
        autoCompletes = suggestions
            .Select(s => input[..^last.Length] + s)
            .ToList();
    }

    void ValueAutoCompletion<T>(string last, string input, string prefix, Dictionary<string, T> availableParameters)
    {
        var suggestions = StartsWith(last[prefix.Length..], availableParameters.Keys);
        var lastAfterEqual = last
            .Split("=")
            .Last();
        autoCompletes = suggestions
            .Select(s => input[..^lastAfterEqual.Length] + s)
            .ToList();
    }

    private static string LastWord(string input)
    {
        var split = input.Split(" ");
        return (split.LastOrDefault() ?? "").Trim();
    }

    private IEnumerable<string> StartsWith(string s, ICollection<string> targets)
    {
        Console.WriteLine("StartsWith: " + s + " options: " + targets.Aggregate("", func: (s1, s2) => s1 + s2));
        return targets
            .Where(target =>
            {
                if (s.Length > target.Length)
                    return false;

                return !s
                    .Where((t, i) => t != target[i])
                    .Any();
            })
            .ToList();
    }

}