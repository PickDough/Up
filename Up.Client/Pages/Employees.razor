@inject HttpClient Http
@inject NavigationManager NavigationManager
@page "/employees"

@using  Microsoft.AspNetCore.Components.QuickGrid
@using Up.Common.Dto
@using Up.Common.Model
@using Up.Common.Requests
@using Up.Common.Response

<h3>Employees</h3>
<SearchComponent/>
<p>Total: <strong>@numResults results found</strong></p>
<div class="grid" tabindex="-1">
    <QuickGrid ItemsProvider="itemsProvider" Virtualize="true">
        <TemplateColumn Title="Id" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn="true"
                        SortBy="idSort" Sortable="true">
            <span>@context.EmployeeId <img class="edit-image" align="right" src="./5996831_optimized.png"
                                           onclick="@(() => NavigationManager.NavigateTo($"employee/{context.EmployeeId}"))"
                                           alt="Edit"/>
            </span>
        </TemplateColumn>
        <PropertyColumn Title="First Name" Property="@(e => e.FirstName)" Sortable="true"/>
        <PropertyColumn Title="Last Name" Property="@(e => e.LastName)" Sortable="true"/>
        <PropertyColumn Title="Hire Date" Format="d"  Property="@(e => e.HireDate)" Sortable="true"/>
        <PropertyColumn Title="Company" Property="@(e => e.Company.CompanyName)"/>
        <PropertyColumn Title="Position" Property="@(e => e.Position.PositionName)"/>
        <PropertyColumn Title="Department" Property="@(e => e.Department.DepartmentName)"/>
        <PropertyColumn Title="Salary" Format="C" Property="@(e => e.Salary)" Sortable="true"/>
    </QuickGrid>
</div>

@code {
    GridItemsProvider<Employee>? itemsProvider;
    int numResults;
    private GridSort<Employee>? idSort = GridSort<Employee>.ByAscending(e => e.EmployeeId);

    protected override Task OnInitializedAsync()
    {
        itemsProvider = async gridRequest =>
        {
            var employeesResponse = await GetAllEmployeesResponse(gridRequest);
            if (employeesResponse is null)
                return GridItemsProviderResult.From<Employee>([], 0);

            numResults = employeesResponse.TotalCount;
            StateHasChanged();

            return GridItemsProviderResult.From(employeesResponse.Employees, employeesResponse.TotalCount);
        };

        return base.OnInitializedAsync();
    }

    async Task<GetAllEmployeesResponse?> GetAllEmployeesResponse(GridItemsProviderRequest<Employee> gridRequest)
    {
        var sort = gridRequest
            .GetSortByProperties()
            .LastOrDefault();

        var request = new HttpRequestMessage
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri($"/employee?offset={gridRequest.StartIndex}&pageSize={gridRequest.Count ?? 0}", UriKind.Relative),
            Content = JsonContent.Create(new GetAllEmployeesRequest
            {
                SortRules = SortRuleFromPropertyName(sort.PropertyName, sort.Direction)
            })
        };
        var response = await Http.SendAsync(request);
        var employeesResponse = await response.Content.ReadFromJsonAsync<GetAllEmployeesResponse>();
        return employeesResponse;
    }

    private static EmployeeSortRule? SortRuleFromPropertyName(string? property, SortDirection direction)
    {
        return property switch
        {
            "EmployeeId" => new EmployeeSortRule.EmployeeId(direction == SortDirection.Descending),
            "FirstName" => new EmployeeSortRule.FirstName(direction == SortDirection.Descending),
            "LastName" => new EmployeeSortRule.LastName(direction == SortDirection.Descending),
            "Salary" => new EmployeeSortRule.TotalSalary(direction == SortDirection.Descending),
            "HireDate" => new EmployeeSortRule.HireDate(direction == SortDirection.Descending),
            _ => null
        };
    }

}